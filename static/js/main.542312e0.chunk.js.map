{"version":3,"sources":["../../src/Utils.ts","../../src/createChart.ts","../../src/beeswarm.ts","../../src/scatterPlot.ts","../../src/index.tsx","rapidTooltip.ts","App.tsx","index.tsx"],"names":["appendQuadrantLabel","container","labelFont","color","onMouseMove","id","label","textParts","x","d3","y","pageY","onMouseLeave","d","text","i","input","onQuadrantLabelMouseLeave","partition","data","filteredBeeswarmData","beeswarmData","margin","top","right","bottom","left","width","size","height","beeswarmWidth","Math","scatterplotWidth","svg","axisLabelColor","scatterplot","beeswarm","allYValues","scatterplotData","rawMinY","axisMinMax","rawMaxY","minY","maxY","xScale","yScale","bottomAxisSpacing","axisLabels","bottomLeftNode","bottomRightNode","start","rightLabelBbox","end","leftAxisLabel","arrowPadding","leftAxisLabelNode","bbox","orginalX","orginalY","quadrantBackgroundColors","makeGridlinesY","zeroAxisLabel","force","simulation","radius","faded","highlighted","fill","onClick","getLabel","createBeeswarm","quadrantLabels","quadrantLabelColor","onQuadrantLabelMouseMove","xAxis","t","parseFloat","makeGridlinesX","createScatterPlot","averageLineText","minX","maxX","Root","styled","SizingElm","props","sizingNodeRef","useRef","svgNodeRef","useState","window","useEffect","updateWindowWidth","debounce","setWindowWidth","svgNode","sizingNode","select","createChart","clientHeight","windowWidth","ref","key","className","RapidTooltipRoot","div","App","tooltipRef","setHovered","datum","coords","node","current","innerHTML","columnCount","rows","length","forEach","r","row","c","alignment","style","boldColumns","includes","additionalContent","additionalHTML","title","getStandardTooltip","removeHovered","useCallback","display","RawData","map","naics","toString","rca_emp","density_emp","I","II","III","IV","V","leftUp","leftDown","bottomLeft","bottomRight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.542312e0.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nexport const appendQuadrantLabel =\n  (container: d3.Selection<any, unknown, null, undefined>,\n   labelFont: string | undefined,\n   color: string | undefined,\n   onMouseMove: undefined | ((quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void),\n   onMouseLeave: undefined | ((quadrant: {id: string, label: string}) => void),\n ) =>\n    (xVal: number, yVal: number, textParts: string[], textAnchor: string, id: string) => {\n      const label = container.append('text')\n          .style('text-anchor', textAnchor)\n          .style('opacity', 0.8)\n          .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n          .style('font-size', 'clamp(12px, 1.75vw, 20px)')\n          .style('font-weight', '600')\n          .style('text-transform', 'uppercase')\n          .style('dominant-baseline', 'bottom')\n          .attr('fill', color ? color : '#333')\n          .attr('x', xVal)\n          .attr('y', yVal)\n          .on('mousemove', () => {\n            if (onMouseMove) {\n              onMouseMove({id, label: textParts.join(' ')}, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n            }\n          })\n          .on('mouseleave', () => {\n            if (onMouseLeave) {\n              onMouseLeave({id, label: textParts.join(' ')})\n            }\n          })\n\n        label.selectAll('tspan')\n          .data(textParts)\n          .enter()\n          .append('tspan')\n          .text(d => {\n            const text = d;\n            return text !== undefined ? text : '';\n          })\n          .attr('x', xVal)\n          .attr('dx', 0)\n          .attr('dy', (_d, i) => i !== 0 ? 15 : 0);\n    };\n","import * as d3 from 'd3';\nimport partition from 'lodash/partition';\nimport createScatterPlot from './scatterPlot';\nimport createBeeswarm, {\n  maxBeeswarmWidth,\n  minBeeswarmWidth,\n} from './beeswarm';\nimport {Datum, Dimensions} from './types';\n\ninterface Input {\n  svg: d3.Selection<any, unknown, null, undefined>;\n  // tooltip: d3.Selection<any, unknown, null, undefined>;\n  data: Datum[];\n  size: Dimensions;\n  axisLabels?: {\n    left?: string,\n    leftUp?: string\n    leftDown?: string\n    bottomLeft?: string\n    bottomRight?: string\n  };\n  axisMinMax?: {\n    minX?: number,\n    maxX?: number,\n    minY?: number,\n    maxY?: number,\n  };\n  averageLineText?: string;\n  quadrantLabels?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  quadrantBackgroundColors?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  labelFont?: string;\n  zeroAxisLabel?: string;\n  axisLabelColor?: string;\n  quadrantLabelColor?: string;\n  onQuadrantLabelMouseMove?: (quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void;\n  onQuadrantLabelMouseLeave?: (quadrant: {id: string, label: string}) => void;\n}\n\nexport default (input: Input) => {\n  const {\n    svg, data, size, axisLabels, axisMinMax,\n    averageLineText, quadrantLabels, labelFont,\n    zeroAxisLabel, axisLabelColor, quadrantLabelColor,\n    quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  } = input;\n\n  const [scatterplotData, beeswarmData] = partition(data, (d) => d.x > 0);\n\n  const filteredBeeswarmData = beeswarmData.filter(d => d.y > 0);\n\n  const margin = {top: 30, right: 15, bottom: 60, left: 50};\n  const width = size.width - margin.left - margin.right;\n  const height = size.height - margin.bottom - margin.top;\n  const beeswarmWidth = Math.max(minBeeswarmWidth, Math.min(width * 0.15, maxBeeswarmWidth))\n  const scatterplotWidth = width - beeswarmWidth;\n\n  // append the svg object to the body of the page\n  svg\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom);\n\n  svg.append(\"defs\").append(\"marker\")\n    .attr(\"id\", \"arrowhead\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refY\", 2)\n    .attr(\"markerWidth\", 4)\n    .attr(\"markerHeight\", 4)\n    .attr(\"orient\", \"auto-start-reverse\")\n  .append(\"path\")\n    .attr(\"d\", \"M0,0 L4,2 0,4\")\n    .attr('fill', axisLabelColor ? axisLabelColor : '#333333');\n\n  const scatterplot = svg\n    .append('g')\n      .attr('transform',\n            'translate(' + (margin.left + beeswarmWidth) + ',' + margin.top + ')');\n\n  const beeswarm = svg\n    .append('g')\n      .attr('transform',\n            'translate(' + (margin.left) + ',' + margin.top + ')');\n\n  const allYValues = scatterplotData.map(({y}) => y);\n\n  const rawMinY = axisMinMax && axisMinMax.minY !== undefined ? axisMinMax.minY : d3.min(allYValues);\n  const rawMaxY = axisMinMax && axisMinMax.maxY !== undefined ? axisMinMax.maxY : d3.max(allYValues);\n\n  const minX = 0.001;\n  const maxX = 256;\n  const minY = rawMinY ? Math.floor(rawMinY) : 0;\n  const maxY = rawMaxY ? Math.ceil(rawMaxY) : 0;\n\n  const xScale = d3.scaleLog()\n    .domain([minX, maxX])\n    .range([ 0, scatterplotWidth ])\n    .base(2)\n    .nice()\n\n  const yScale = d3.scaleLinear()\n    .domain([minY, maxY])\n    .range([ height, 0]);\n  \n  // append X axis label\n  const bottomLeftClassName = 'pswot-plot-bottom-left-label';\n  const bottomRightClassName = 'pswot-plot-bottom-right-label';\n  const bottomAxisSpacing = width * 0.015;\n  scatterplot\n    .append('text')\n      .attr('class', bottomLeftClassName)\n      .attr('y', height + (margin.top * 1.5))\n      .attr('x', xScale(1) - bottomAxisSpacing)\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('text-anchor', 'end')\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', `clamp(14px, ${width * 0.015}px, 18px)`)\n      .style('font-weight', '600')\n      .style('text-transform', 'uppercase')\n      .text(axisLabels && axisLabels.bottomLeft ? axisLabels.bottomLeft : '');\n  scatterplot\n    .append('text')\n      .attr('class', bottomRightClassName)\n      .attr('y', height + (margin.top * 1.5))\n      .attr('x', xScale(1) + bottomAxisSpacing)\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('text-anchor', 'start')\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', `clamp(14px, ${width * 0.015}px, 18px)`)\n      .style('font-weight', '600')\n      .style('text-transform', 'uppercase')\n      .text(axisLabels && axisLabels.bottomRight ? axisLabels.bottomRight : '');\n\n  const arrowPadding = 10;\n  const bottomLeftNode = d3.select('.' + bottomLeftClassName).node()\n  const bottomRightNode = d3.select('.' + bottomRightClassName).node()\n  if (bottomLeftNode && bottomRightNode) {\n    const start = (bottomLeftNode as any).getBBox().x - arrowPadding;\n    const rightLabelBbox = (bottomRightNode as any).getBBox();\n    const end = rightLabelBbox.x + rightLabelBbox.width  + arrowPadding;\n    scatterplot.append('line')\n      .attr('x1',start)\n      .attr('x2',end)\n      .attr('y1',height + (margin.top * 1.3))\n      .attr('y2',height + (margin.top * 1.3))\n      .attr('stroke-width', '10px')\n      .attr('stroke', 'none')\n      .style('pointer-events', 'none')\n      .attr(\"marker-end\", \"url(#arrowhead)\")\n      .attr(\"marker-start\", \"url(#arrowhead)\");\n  }\n\n  // append Y axis label\n  const leftAxisClassName = 'pswot-plot-left-axis-label';\n  const leftAxisLabel = svg\n    .append('text')\n    .attr('transform', 'rotate(-90)')\n      .attr('y', margin.right / 2)\n      .attr('x', 0 - (height / 2 + margin.top + margin.bottom))\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .attr('dy', '1.25em')\n      .style('text-anchor', 'middle')\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('text-transform', 'uppercase')\n\n  leftAxisLabel.append('tspan')\n      .attr('dx', arrowPadding * 3)\n      .style('font-size', `clamp(10px, ${width * 0.015}px, 14px)`)\n      .text(axisLabels && axisLabels.leftDown ? axisLabels.leftDown : '');\n\n  leftAxisLabel.append('tspan')\n      .attr('class', leftAxisClassName)\n      .style('font-size', `clamp(14px, ${width * 0.015}px, 18px)`)\n      .style('font-weight', '600')\n      .attr('dx', arrowPadding * 4.5)\n      .text(axisLabels && axisLabels.left ? axisLabels.left : '');\n\n  leftAxisLabel.append('tspan')\n      .attr('dx', arrowPadding * 4.5)\n      .style('font-size', `clamp(10px, ${width * 0.015}px, 14px)`)\n      .text(axisLabels && axisLabels.leftUp ? axisLabels.leftUp : '');\n\n  const leftAxisLabelNode = d3.select('.' + leftAxisClassName).node()\n  if (leftAxisLabelNode) {\n    const bbox = (leftAxisLabelNode as any).getBoundingClientRect();\n    const start = bbox.y - arrowPadding - 5;\n    const end = bbox.y + bbox.height + arrowPadding + 5;\n    svg.append('line')\n      .attr('x1',bbox.x + arrowPadding + 2)\n      .attr('x2',bbox.x + arrowPadding + 2)\n      .attr('y1',start)\n      .attr('y2',end)\n      .attr('stroke-width', '10px')\n      .attr('stroke', 'none')\n      .style('pointer-events', 'none')\n      .attr(\"marker-end\", \"url(#arrowhead)\")\n      .attr(\"marker-start\", \"url(#arrowhead)\")\n  }\n\n  createBeeswarm({\n    container: beeswarm,\n    data: [...filteredBeeswarmData],\n    size: {width: beeswarmWidth - (margin.right * 2), height},\n    xScale, yScale,\n    label: quadrantLabels ? quadrantLabels.V : undefined,\n    labelFont, maxY,\n    zeroAxisLabel,\n    margin, axisLabelColor,\n    quadrantLabelColor,\n    quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  });\n\n  createScatterPlot({\n    container: scatterplot,\n    data: [...scatterplotData],\n    size: {width: scatterplotWidth, height},\n    margin,\n    averageLineText, quadrantLabels, labelFont,\n    xScale, yScale,\n    axisMinMax: {minX, maxX, minY, maxY}, axisLabelColor,\n    quadrantLabelColor,\n    quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  });\n\n\n};\n","import * as d3 from 'd3';\nimport {Datum, Dimensions} from './types';\nimport {appendQuadrantLabel} from './Utils';\n\nexport const maxBeeswarmWidth = 180;\nexport const minBeeswarmWidth = 110;\n\ninterface Input {\n  container: d3.Selection<any, unknown, null, undefined>;\n  data: Datum[];\n  size: Dimensions;\n  xScale: d3.ScaleLogarithmic<number, number, never>;\n  yScale: d3.ScaleLinear<number, number, never>;\n  label: string | undefined;\n  zeroAxisLabel: string | undefined;\n  labelFont: string | undefined;\n  maxY: number;\n  margin: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number,\n  }\n  axisLabelColor: string | undefined;\n  quadrantLabelColor: string | undefined;\n  quadrantBackgroundColors?: {V?: string};\n  onQuadrantLabelMouseMove: undefined | ((quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void);\n  onQuadrantLabelMouseLeave: undefined | ((quadrant: {id: string, label: string}) => void);\n}\n\ninterface ForceDatum extends Datum {\n  orginalX: number;\n  orginalY: number;\n}\n\nconst createBeeswarm = (input: Input) => {\n  const {\n    container, size: {width, height}, yScale, label, labelFont, maxY, zeroAxisLabel,\n    margin, axisLabelColor, quadrantLabelColor, quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  } = input;\n\n  const data: ForceDatum[] = input.data.map(d => ({...d, orginalX: d.x, orginalY: d.y}));\n\n  if (quadrantBackgroundColors) {\n    // Add background colors\n     container\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .attr(\"width\", width)\n        .attr(\"height\", yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.V ? quadrantBackgroundColors.V : '#fff')\n  }\n\n\n  const makeGridlinesY: any = () => d3.axisLeft(yScale).ticks(10);\n  // add the Y gridlines\n  container.append('g')\n      .attr('class', 'grid')\n      .style('opacity', '0.25')\n      .style('stroke-dasharray', '3 1')\n      .call(makeGridlinesY()\n          .tickSize(-width)\n          .tickFormat(''),\n      );\n  container.append('line')\n    .attr('x1', width)\n    .attr('x2', width)\n    .attr('y1', 0)\n    .attr('y2', height)\n    .attr('stroke', '#333')\n    .style('pointer-events', 'none')\n    .style('opacity', '0.25')\n    .style('stroke-dasharray', '3 1')\n  if (zeroAxisLabel !== undefined) {\n    container.append('text')\n      .attr('x', 0)\n      .attr('y', height + (margin.top * 1.5))\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('opacity', 0.8)\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', 'clamp(12px, 1vw, 16px)')\n      .style('font-weight', '600')\n      .style('pointer-events', 'none')\n      .text(zeroAxisLabel);\n  }\n\n  const multiplier = 1 - ((maxBeeswarmWidth - (width + 30)) / (maxBeeswarmWidth - minBeeswarmWidth));\n  const force = 7 * (1 + multiplier);\n\n  const simulation = d3.forceSimulation(data)\n      .force('x', d3.forceX(width / 2).strength(1))\n      .force(\"y\", d3.forceY(d => yScale(d.y ? d.y + 0 : 0 )))\n      .force(\"collide\", d3.forceCollide(force))\n      .stop();\n\n  for (let i = 0; i < 120; ++i) simulation.tick();\n\n  container\n    .selectAll('dot')\n    .data(data)\n    .enter()\n    .append('circle')\n      .attr('r', ({radius}) => radius ? radius : 4)\n      .style(\"fill\", \"#69b3a2\")\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => yScale(d.orginalY))\n      .style('opacity', ({faded}) => faded ? 0.25 : 1)\n      .on('mousemove', d => {\n          if (d.onMouseMove) {\n            d.onMouseMove(d, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n          }\n        })\n      .on('mouseout', d => {\n        if (d.onMouseLeave) {\n          d.onMouseLeave(d)\n        }\n      })\n      .on('click', d => d.onClick ? d.onClick(d) : undefined);\n\n  const highlighted = data.find(d => d.highlighted);\n    if (highlighted) {\n      // Add highlighted dot background\n      container.append('g')\n        .selectAll('dot')\n        .data([highlighted])\n        .enter()\n        .append('circle')\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => yScale(d.orginalY))\n          .attr('r', ({radius}) => radius ? radius * 4 : 16)\n          .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n          .style('opacity', '0.4')\n          .style('pointer-events', 'none');\n      // Add highlighted dot over to top\n      container.append('g')\n        .selectAll('dot')\n        .data([highlighted])\n        .enter()\n        .append('circle')\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => yScale(d.orginalY))\n          .attr('r', ({radius}) => radius ? radius : 4)\n          .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n          .style('cursor', ({onClick}) => onClick ? 'pointer' : 'default')\n          .on('mousemove', d => {\n            if (d.onMouseMove) {\n              d.onMouseMove(d, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n            }\n          })\n          .on('mouseout', d => {\n            if (d.onMouseLeave) {\n              d.onMouseLeave(d)\n            }\n          })\n          .on('click', d => d.onClick ? d.onClick(d) : undefined);\n    }\n\n  if (label !== undefined) {\n    const getLabel = appendQuadrantLabel(\n      container,\n      labelFont,\n      quadrantLabelColor,\n      onQuadrantLabelMouseMove,\n      onQuadrantLabelMouseLeave,\n    );\n\n    const textParts = (label as string).split('\\n');\n    const xVal = width / 2;\n    const yVal = yScale(maxY) + 20;\n    getLabel(xVal, yVal, textParts, 'middle', 'V');\n  }\n\n}\n\nexport default createBeeswarm;\n","import * as d3 from 'd3';\nimport {Datum, Dimensions} from './types';\nimport {appendQuadrantLabel} from './Utils';\n\ninterface Input {\n  container: d3.Selection<any, unknown, null, undefined>;\n  // tooltip: d3.Selection<any, unknown, null, undefined>;\n  data: Datum[];\n  size: Dimensions;\n  xScale: d3.ScaleLogarithmic<number, number, never>;\n  yScale: d3.ScaleLinear<number, number, never>;\n  margin: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number,\n  }\n  axisMinMax: {\n    minX: number,\n    maxX: number,\n    minY: number,\n    maxY: number,\n  };\n  averageLineText?: string;\n  quadrantLabels?: {I?: string, II?: string, III?: string, IV?: string};\n  quadrantBackgroundColors?: {I?: string, II?: string, III?: string, IV?: string};\n  labelFont?: string;\n  axisLabelColor: string | undefined;\n  quadrantLabelColor: string | undefined;\n  onQuadrantLabelMouseMove: undefined | ((quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void);\n  onQuadrantLabelMouseLeave: undefined | ((quadrant: {id: string, label: string}) => void);\n}\n\nconst createScatterPlot = (input: Input) => {\n  const {\n    container, size: {width, height},\n    averageLineText, quadrantLabels, labelFont, margin, data, xScale, yScale,\n    axisMinMax: {minX, maxX, minY, maxY}, axisLabelColor, quadrantLabelColor,\n    quadrantBackgroundColors, onQuadrantLabelMouseLeave, onQuadrantLabelMouseMove,\n  } = input;\n\n  if (quadrantBackgroundColors) {\n    // Add background colors\n     container\n        .append(\"rect\")\n        .attr(\"x\", xScale(1))\n        .attr(\"y\", 0)\n        .attr(\"width\", xScale(maxX) - xScale(1))\n        .attr(\"height\", yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.I ? quadrantBackgroundColors.I : '#fff')\n     container\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .attr(\"width\", xScale(1))\n        .attr(\"height\", yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.II ? quadrantBackgroundColors.II : '#fff')\n     container\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", yScale(0))\n        .attr(\"width\", xScale(1))\n        .attr(\"height\", yScale(minY) - yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.III ? quadrantBackgroundColors.III : '#fff')\n     container\n        .append(\"rect\")\n        .attr(\"x\", xScale(1))\n        .attr(\"y\", yScale(0))\n        .attr(\"width\", xScale(maxX) - xScale(1))\n        .attr(\"height\", yScale(minY) - yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.IV ? quadrantBackgroundColors.IV : '#fff')\n  }\n\n  // Add X axis\n  const xAxis = container.append('g')\n    .attr('transform', 'translate(0,' + height + ')')\n    .call(\n      d3.axisBottom(xScale)\n        .ticks(10)\n        .tickFormat(t => parseFloat((t as number).toFixed(3)) as any)\n    )\n    xAxis.select('path')\n      .attr('stroke', 'none')\n    xAxis.selectAll('.tick line')\n      .attr('stroke', 'none')\n    xAxis.selectAll('text')\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('opacity', '0.75')\n      .style('font-size', `clamp(7px, ${width * 0.0175}px, 12px)`)\n\n  // gridlines in x axis function\n  const makeGridlinesX: any = () => d3.axisBottom(xScale).ticks(10);\n\n\n  // gridlines in y axis function\n  const makeGridlinesY: any = () => d3.axisLeft(yScale).ticks(10);\n\n  // add the X gridlines\n  container.append('g')\n      .attr('class', 'grid')\n      .attr('transform', 'translate(0,' + height + ')')\n      .style('opacity', '0.25')\n      .style('stroke-dasharray', '3 1')\n      .call(makeGridlinesX()\n          .tickSize(-height)\n          .tickFormat(''),\n      );\n\n  // add the Y gridlines\n  container.append('g')\n      .attr('class', 'grid')\n      .style('opacity', '0.25')\n      .style('stroke-dasharray', '3 1')\n      .call(makeGridlinesY()\n          .tickSize(-width)\n          .tickFormat(''),\n      );\n\n  // add quadrant lines\n  container.append('line')\n    .attr('x1',xScale(minX))\n    .attr('x2',xScale(maxX))\n    .attr('y1',yScale(0))\n    .attr('y2',yScale(0))\n    .attr('stroke-width', '2px')\n    .style('pointer-events', 'none')\n    .attr('stroke', '#333');\n  container.append('line')\n    .attr('x1',xScale(1))\n    .attr('x2',xScale(1))\n    .attr('y1',yScale(minY))\n    .attr('y2',0 - margin.top)\n    .attr('stroke-width', '2px')\n    .style('pointer-events', 'none')\n    .attr('stroke', '#333');\n\n  if (averageLineText) {\n    container.append('text')\n      .attr('x',xScale(1) + 4)\n      .attr('y',-10)\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('opacity', 0.8)\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', 'clamp(12px, 1vw, 16px)')\n      .style('font-weight', '600')\n      .style('pointer-events', 'none')\n      .text(averageLineText);\n\n  }\n\n  if (quadrantLabels !== undefined) {\n    const getLabel = appendQuadrantLabel(\n      container,\n      labelFont,\n      quadrantLabelColor,\n      onQuadrantLabelMouseMove,\n      onQuadrantLabelMouseLeave,\n    );\n    if (quadrantLabels.I !== undefined) {\n      const xVal = width - 4;\n      const yVal = yScale(maxY) + 20;\n      const textParts = (quadrantLabels.I as string).split('\\n');\n      getLabel(xVal, yVal, textParts, 'end', 'I');\n    }\n    if (quadrantLabels.II !== undefined) {\n      const xVal = xScale(minX) + 4;\n      const yVal = yScale(maxY) + 20;\n      const textParts = (quadrantLabels.II as string).split('\\n');\n      getLabel(xVal, yVal, textParts, 'start', 'II');\n    }\n    if (quadrantLabels.III !== undefined) {\n      const textParts = (quadrantLabels.III as string).split('\\n');\n      const xVal = xScale(minX) + 4;\n      const yVal = yScale(minY) - ((textParts.length - 1) * 15) - 6;\n      getLabel(xVal, yVal, textParts, 'start', 'III');\n    }\n    if (quadrantLabels.IV !== undefined) {\n      const textParts = (quadrantLabels.IV as string).split('\\n');\n      const xVal = width - 4;\n      const yVal = yScale(minY) - ((textParts.length - 1) * 15) - 6;\n      getLabel(xVal, yVal, textParts, 'end', 'IV');\n    }\n  }\n\n  // Add dots\n  container.append('g')\n    .selectAll('dot')\n    .data(data)\n    .enter()\n    .append('circle')\n      .attr('cx', ({x}) => xScale(x))\n      .attr('cy', ({y}) => yScale(y))\n      .attr('r', ({radius}) => radius ? radius : 4)\n      .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n      .style('opacity', ({faded}) => faded ? 0.25 : 1)\n      .style('cursor', ({onClick}) => onClick ? 'pointer' : 'default')\n      .on('mousemove', d => {\n          if (d.onMouseMove) {\n            d.onMouseMove(d, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n          }\n        })\n      .on('mouseout', d => {\n        if (d.onMouseLeave) {\n          d.onMouseLeave(d)\n        }\n      })\n      .on('click', d => d.onClick ? d.onClick(d) : undefined);\n\n  const highlighted = data.find(d => d.highlighted);\n  if (highlighted) {\n    // Add highlighted dot background\n    container.append('g')\n      .selectAll('dot')\n      .data([highlighted])\n      .enter()\n      .append('circle')\n        .attr('cx', ({x}) => xScale(x))\n        .attr('cy', ({y}) => yScale(y))\n        .attr('r', ({radius}) => radius ? radius * 4 : 16)\n        .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n        .style('opacity', '0.4')\n        .style('pointer-events', 'none');\n    // Add highlighted dot over to top\n    container.append('g')\n      .selectAll('dot')\n      .data([highlighted])\n      .enter()\n      .append('circle')\n        .attr('cx', ({x}) => xScale(x))\n        .attr('cy', ({y}) => yScale(y))\n        .attr('r', ({radius}) => radius ? radius : 4)\n        .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n        .style('cursor', ({onClick}) => onClick ? 'pointer' : 'default')\n        .on('mousemove', d => {\n          if (d.onMouseMove) {\n            d.onMouseMove(d, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n          }\n        })\n        .on('mouseout', d => {\n          if (d.onMouseLeave) {\n            d.onMouseLeave(d)\n          }\n        })\n        .on('click', d => d.onClick ? d.onClick(d) : undefined);\n  }\n}\n\nexport default createScatterPlot;\n","import { select } from 'd3';\nimport React, {useState, useEffect, useRef} from 'react';\nimport styled from 'styled-components';\nimport createChart from './createChart';\nimport debounce from 'lodash/debounce';\nimport {Datum} from './types';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  margin: auto;\n`;\n\nconst SizingElm = styled.div`\n  height: 100%;\n  width: 100%;\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\ninterface Props {\n  id: string;\n  data: Datum[];\n  axisLabels?: {\n    left?: string,\n    leftUp?: string\n    leftDown?: string\n    bottomLeft?: string\n    bottomRight?: string\n  };\n  axisMinMax?: {\n    minX?: number,\n    maxX?: number,\n    minY?: number,\n    maxY?: number,\n  };\n  averageLineText?: string;\n  zeroAxisLabel?: string;\n  quadrantLabels?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  axisLabelColor?: string;\n  quadrantLabelColor?: string;\n  quadrantBackgroundColors?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  onQuadrantLabelMouseMove?: (quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void;\n  onQuadrantLabelMouseLeave?: (quadrant: {id: string, label: string}) => void;\n}\n\nexport const PSwotPlot = (props: Props) => {\n  const {\n    id, data, axisLabels, axisMinMax, averageLineText, quadrantLabels,\n    zeroAxisLabel, axisLabelColor, quadrantLabelColor, quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  } = props;\n\n  const sizingNodeRef = useRef<HTMLDivElement | null>(null);\n  const svgNodeRef = useRef<any>(null);\n\n  const [windowWidth, setWindowWidth] = useState<number>(window.innerWidth);\n\n  useEffect(() => {\n    const updateWindowWidth = debounce(() => {\n      setWindowWidth(window.innerWidth);\n    }, 500);\n    window.addEventListener('resize', updateWindowWidth);\n    return () => {\n      window.removeEventListener('resize', updateWindowWidth);\n    };\n  }, []);\n\n\n  useEffect(() => {\n    let svgNode: HTMLDivElement | null = null;\n    if (svgNodeRef && svgNodeRef.current && sizingNodeRef && sizingNodeRef.current) {\n      const sizingNode = sizingNodeRef.current;\n      svgNode = svgNodeRef.current;\n      const svg = select(svgNode);\n      createChart({\n        svg, data: [...data], size: {\n          width: sizingNode.clientWidth, height: sizingNode.clientHeight,\n        },\n        axisLabels,\n        axisMinMax,\n        averageLineText,\n        quadrantLabels,\n        zeroAxisLabel,\n        axisLabelColor,\n        quadrantLabelColor,\n        quadrantBackgroundColors,\n        onQuadrantLabelMouseMove,\n        onQuadrantLabelMouseLeave,\n      });\n    }\n    return () => {\n      if (svgNode) {\n        svgNode.innerHTML = '';\n      }\n    };\n  }, [svgNodeRef, sizingNodeRef, windowWidth, props]);\n\n  return (\n    <Root>\n      <SizingElm ref={sizingNodeRef}>\n        <svg ref={svgNodeRef} key={id + windowWidth + 'svg'} className={'react-fast-charts-root-svg'} />\n      </SizingElm>\n    </Root>\n  );\n};\n\nexport {Datum};\n\nexport default PSwotPlot;\n","import styled from 'styled-components/macro';\n\ninterface Input {\n  title: string;\n  color: string;\n  rows: string[][];\n  boldColumns?: number[];\n  additionalHTML?: string;\n}\n\nexport const RapidTooltipRoot = styled.div`\n  position: fixed;\n  z-index: 3000;\n  max-width: 16rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.7rem;\n  line-height: 1.4;\n  text-transform: none;\n  transition: opacity 0.15s ease;\n  color: #333;\n  background-color: #fff;\n  border: 1px solid #dfdfdf;\n  border-radius: 4px;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  pointer-events: none;\n  transform: translate(-50%, calc(-100% - 1.5rem));\n  display: none;\n`;\n\nexport const getStandardTooltip = (input: Input) => {\n  const columnCount = input.rows.length && input.rows[0].length ? input.rows[0].length : 1;\n\n  let rows: string = '';\n  input.rows.forEach(r => {\n    let row = '';\n    r.forEach((c, i) => {\n      const alignment = i === 0\n        ? 'justify-content: flex-start; text-align: left;'\n        : 'justify-content: flex-end; text-align: right;';\n      const style = input.boldColumns && input.boldColumns.includes(i)\n        ? `style=\"font-weight: 600;${alignment}\"` : '';\n      row = row + `<div class=\"rapid-tooltip-cell\" ${style}>${c}</div>`;\n    });\n    rows = rows + row;\n  });\n\n  const additionalContent = input.additionalHTML ? `<div>${input.additionalHTML}</div>` : '';\n\n  return `\n    <div>\n      <div class=\"rapid-tooltip-title\" style=\"background-color: ${input.color};\">\n        ${input.title}\n      </div>\n      <div\n        class=\"rapid-tooltip-subsection-grid\"\n        style=\"display: grid; grid-template-columns: repeat(${columnCount}, auto);\"\n      >\n        ${rows}\n      </div>\n      ${additionalContent}\n    </div>\n    <div class=\"rapid-tooltip-arrow-container\">\n      <div class=\"rapid-tooltip-arrow\"></div>\n    </div>\n  `;\n};","import React, {useRef, useCallback} from 'react'\nimport PSwotPlot, {Datum} from 'react-pswot-plot'\nimport RawData from './data/hefei_employees.json';\nimport styled from 'styled-components';\nimport {getStandardTooltip, RapidTooltipRoot} from './rapidTooltip';\n\nconst Root = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst App = () => {\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n\n  const setHovered = (datum: {label: string, fill?: string}, coords: {x: number, y: number}) => {\n    const node = tooltipRef.current;\n    if (node) {\n      node.innerHTML = getStandardTooltip({\n        title: datum.label,\n        color: datum.fill ? datum.fill : 'gray',\n        rows: [\n          ['Code', datum.label ],\n        ],\n        boldColumns: [2],\n      });\n      node.style.top = coords.y + 'px';\n      node.style.left = coords.x + 'px';\n      // node.style.display = 'block';\n    }\n  };\n\n  const removeHovered = useCallback(() => {\n    const node = tooltipRef.current;\n    if (node) {\n      node.style.display = 'none';\n    }\n  }, [tooltipRef]);\n\n  const data: Datum[] = RawData.map((d) => {\n    return {\n      label: d.naics.toString(),\n      x: d.rca_emp,\n      y: d.density_emp,\n      // highlighted: !Math.round(Math.random()),\n      // faded: !Math.round(Math.random()),\n      onMouseMove: setHovered,\n      onMouseLeave: removeHovered,\n    }\n  })\n\n  return (\n    <Root>\n      <PSwotPlot\n        id={'react-pswot-plot-demo'}\n        data={data}\n        averageLineText={'Relative Advantage = 1'}\n        quadrantLabels={{\n          I: 'Strength',\n          II: 'Opportunity',\n          III: 'Threat',\n          IV: 'Weakness',\n          V: 'Potential',\n        }}\n        quadrantBackgroundColors={{\n          I: '#dadbdd',\n          II: '#e6e7e8',\n          III: '#f2f3f3',\n          IV: '#fafafb',\n          V: '#edf6f4',\n        }}\n        zeroAxisLabel={'Relative Advantage = 0'}\n        axisLabels={{\n          left: 'Predicted Density Change',\n          leftUp: 'Growing',\n          leftDown: 'Decreasing',\n          bottomLeft: 'Low Relative Advantage',\n          bottomRight: 'High Relative Advantage',\n        }}\n        axisLabelColor={'#333'}\n        quadrantLabelColor={'#f69c7c'}\n        onQuadrantLabelMouseMove={setHovered}\n        onQuadrantLabelMouseLeave={removeHovered}\n      />\n      <RapidTooltipRoot ref={tooltipRef} />\n    </Root>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}