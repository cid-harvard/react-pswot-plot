{"version":3,"sources":["../../src/Utils.ts","../../src/createChart.ts","../../src/beeswarm.ts","../../src/scatterPlot.ts","../../src/index.tsx","rapidTooltip.ts","App.tsx","index.tsx"],"names":["appendQuadrantLabel","container","labelFont","color","onMouseMove","id","label","textParts","x","d3","y","pageY","onMouseLeave","d","text","i","input","svg","data","size","axisLabels","axisMinMax","averageLineText","quadrantLabels","zeroAxisLabel","axisLabelColor","quadrantLabelColor","quadrantBackgroundColors","onQuadrantLabelMouseMove","onQuadrantLabelMouseLeave","partition","scatterplotData","filteredBeeswarmData","beeswarmData","margin","top","right","bottom","left","width","height","beeswarmWidth","Math","scatterplotWidth","scatterplot","beeswarm","allYValues","rawMinY","rawMaxY","minY","maxY","xScale","yScale","bottomAxisSpacing","bottomLeftNode","bottomRightNode","start","rightLabelBbox","end","leftAxisLabel","arrowPadding","leftAxisLabelNode","bbox","orginalX","orginalY","makeGridlinesY","force","simulation","radius","fill","hoveredBackground","hoveredForeground","highlighted","getLabel","createBeeswarm","minX","maxX","xAxis","t","parseFloat","makeGridlinesX","createScatterPlot","Root","styled","SizingElm","props","sizingNodeRef","useRef","svgNodeRef","useState","window","windowWidth","setWindowWidth","useEffect","updateWindowWidth","debounce","svgNode","sizingNode","select","createChart","clientHeight","ref","key","className","RapidTooltipRoot","div","Container","colorMap","App","tooltipRef","setHovered","datum","coords","node","current","industry","IndustryData","find","n","code","rows","push","undefined","toFixed","toString","innerHTML","columnCount","length","forEach","r","row","c","alignment","style","boldColumns","includes","additionalContent","additionalHTML","title","getStandardTooltip","rgba","display","removeHovered","useCallback","RawData","map","naics","naics_id","topLevelParentId","parent_id","parseInt","console","error","Error","parentColor","name","rca_emp","density_emp","I","II","III","IV","V","leftUp","leftDown","bottomLeft","bottomRight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dca044f6.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nexport const appendQuadrantLabel =\n  (container: d3.Selection<any, unknown, null, undefined>,\n   labelFont: string | undefined,\n   color: string | undefined,\n   onMouseMove: undefined | ((quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void),\n   onMouseLeave: undefined | ((quadrant: {id: string, label: string}) => void),\n ) =>\n    (xVal: number, yVal: number, textParts: string[], textAnchor: string, id: string) => {\n      const label = container.append('text')\n          .style('text-anchor', textAnchor)\n          .style('opacity', 0.8)\n          .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n          .style('font-size', 'clamp(12px, 1.65vw, 18px)')\n          .style('font-weight', '600')\n          .style('text-transform', 'uppercase')\n          .style('dominant-baseline', 'bottom')\n          .attr('fill', color ? color : '#333')\n          .attr('x', xVal)\n          .attr('y', yVal)\n          .on('mousemove', () => {\n            if (onMouseMove) {\n              onMouseMove({id, label: textParts.join(' ')}, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n            }\n          })\n          .on('mouseleave', () => {\n            if (onMouseLeave) {\n              onMouseLeave({id, label: textParts.join(' ')})\n            }\n          })\n\n        label.selectAll('tspan')\n          .data(textParts)\n          .enter()\n          .append('tspan')\n          .text(d => {\n            const text = d;\n            return text !== undefined ? text : '';\n          })\n          .attr('x', xVal)\n          .attr('dx', 0)\n          .attr('dy', (_d, i) => i !== 0 ? 15 : 0);\n    };\n","import * as d3 from 'd3';\nimport partition from 'lodash/partition';\nimport createScatterPlot from './scatterPlot';\nimport createBeeswarm, {\n  maxBeeswarmWidth,\n  minBeeswarmWidth,\n} from './beeswarm';\nimport {Datum, Dimensions} from './types';\n\ninterface Input {\n  svg: d3.Selection<any, unknown, null, undefined>;\n  // tooltip: d3.Selection<any, unknown, null, undefined>;\n  data: Datum[];\n  size: Dimensions;\n  axisLabels?: {\n    left?: string,\n    leftUp?: string\n    leftDown?: string\n    bottomLeft?: string\n    bottomRight?: string\n  };\n  axisMinMax?: {\n    minX?: number,\n    maxX?: number,\n    minY?: number,\n    maxY?: number,\n  };\n  averageLineText?: string;\n  quadrantLabels?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  quadrantBackgroundColors?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  labelFont?: string;\n  zeroAxisLabel?: string;\n  axisLabelColor?: string;\n  quadrantLabelColor?: string;\n  onQuadrantLabelMouseMove?: (quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void;\n  onQuadrantLabelMouseLeave?: (quadrant: {id: string, label: string}) => void;\n}\n\nexport default (input: Input) => {\n  const {\n    svg, data, size, axisLabels, axisMinMax,\n    averageLineText, quadrantLabels, labelFont,\n    zeroAxisLabel, axisLabelColor, quadrantLabelColor,\n    quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  } = input;\n\n  const [scatterplotData, beeswarmData] = partition(data, (d) => d.x > 0);\n\n  const filteredBeeswarmData = beeswarmData.filter(d => d.y > 0);\n\n  const margin = {top: 30, right: 15, bottom: 60, left: 50};\n  const width = size.width - margin.left - margin.right;\n  const height = size.height - margin.bottom - margin.top;\n  const beeswarmWidth = Math.max(minBeeswarmWidth, Math.min(width * 0.15, maxBeeswarmWidth))\n  const scatterplotWidth = width - beeswarmWidth;\n\n  // append the svg object to the body of the page\n  svg\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom);\n\n  svg.append(\"defs\").append(\"marker\")\n    .attr(\"id\", \"arrowhead\")\n    .attr(\"viewBox\", \"0 -5 10 10\")\n    .attr(\"refY\", 2)\n    .attr(\"markerWidth\", 4)\n    .attr(\"markerHeight\", 4)\n    .attr(\"orient\", \"auto-start-reverse\")\n  .append(\"path\")\n    .attr(\"d\", \"M0,0 L4,2 0,4\")\n    .attr('fill', axisLabelColor ? axisLabelColor : '#333333');\n\n  const scatterplot = svg\n    .append('g')\n      .attr('transform',\n            'translate(' + (margin.left + beeswarmWidth) + ',' + margin.top + ')');\n\n  const beeswarm = svg\n    .append('g')\n      .attr('transform',\n            'translate(' + (margin.left) + ',' + margin.top + ')');\n\n  const allYValues = scatterplotData.map(({y}) => y);\n\n  const rawMinY = axisMinMax && axisMinMax.minY !== undefined ? axisMinMax.minY : d3.min(allYValues);\n  const rawMaxY = axisMinMax && axisMinMax.maxY !== undefined ? axisMinMax.maxY : d3.max(allYValues);\n\n  const minX = 0.001;\n  const maxX = 256;\n  const minY = rawMinY ? Math.floor(rawMinY) : 0;\n  const maxY = rawMaxY ? Math.ceil(rawMaxY) : 0;\n\n  const xScale = d3.scaleLog()\n    .domain([minX, maxX])\n    .range([ 0, scatterplotWidth ])\n    .base(2)\n    .nice()\n\n  const yScale = d3.scaleLinear()\n    .domain([minY, maxY])\n    .range([ height, 0]);\n  \n  // append X axis label\n  const bottomLeftClassName = 'pswot-plot-bottom-left-label';\n  const bottomRightClassName = 'pswot-plot-bottom-right-label';\n  const bottomAxisSpacing = width * 0.015;\n  scatterplot\n    .append('text')\n      .attr('class', bottomLeftClassName)\n      .attr('y', height + (margin.top * 1.5))\n      .attr('x', xScale(1) - bottomAxisSpacing)\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('text-anchor', 'end')\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', `clamp(14px, ${width * 0.015}px, 18px)`)\n      .style('font-weight', '600')\n      .style('text-transform', 'uppercase')\n      .text(axisLabels && axisLabels.bottomLeft ? axisLabels.bottomLeft : '');\n  scatterplot\n    .append('text')\n      .attr('class', bottomRightClassName)\n      .attr('y', height + (margin.top * 1.5))\n      .attr('x', xScale(1) + bottomAxisSpacing)\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('text-anchor', 'start')\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', `clamp(14px, ${width * 0.015}px, 18px)`)\n      .style('font-weight', '600')\n      .style('text-transform', 'uppercase')\n      .text(axisLabels && axisLabels.bottomRight ? axisLabels.bottomRight : '');\n\n  const arrowPadding = 10;\n  const bottomLeftNode = d3.select('.' + bottomLeftClassName).node()\n  const bottomRightNode = d3.select('.' + bottomRightClassName).node()\n  if (bottomLeftNode && bottomRightNode) {\n    const start = (bottomLeftNode as any).getBBox().x - arrowPadding;\n    const rightLabelBbox = (bottomRightNode as any).getBBox();\n    const end = rightLabelBbox.x + rightLabelBbox.width  + arrowPadding;\n    scatterplot.append('line')\n      .attr('x1',start)\n      .attr('x2',end)\n      .attr('y1',height + (margin.top * 1.3))\n      .attr('y2',height + (margin.top * 1.3))\n      .attr('stroke-width', '10px')\n      .attr('stroke', 'none')\n      .style('pointer-events', 'none')\n      .attr(\"marker-end\", \"url(#arrowhead)\")\n      .attr(\"marker-start\", \"url(#arrowhead)\");\n  }\n\n  // append Y axis label\n  const leftAxisClassName = 'pswot-plot-left-axis-label';\n  const leftAxisLabel = svg\n    .append('text')\n    .attr('transform', 'rotate(-90)')\n      .attr('y', margin.right / 2)\n      .attr('x', 0 - (height / 2 + margin.top + margin.bottom))\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .attr('dy', '1.25em')\n      .style('text-anchor', 'middle')\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('text-transform', 'uppercase')\n\n  leftAxisLabel.append('tspan')\n      .attr('dx', arrowPadding * 3)\n      .style('font-size', `clamp(10px, ${width * 0.015}px, 14px)`)\n      .text(axisLabels && axisLabels.leftDown ? axisLabels.leftDown : '');\n\n  leftAxisLabel.append('tspan')\n      .attr('class', leftAxisClassName)\n      .style('font-size', `clamp(14px, ${width * 0.015}px, 18px)`)\n      .style('font-weight', '600')\n      .attr('dx', arrowPadding * 4.5)\n      .text(axisLabels && axisLabels.left ? axisLabels.left : '');\n\n  leftAxisLabel.append('tspan')\n      .attr('dx', arrowPadding * 4.5)\n      .style('font-size', `clamp(10px, ${width * 0.015}px, 14px)`)\n      .text(axisLabels && axisLabels.leftUp ? axisLabels.leftUp : '');\n\n  const leftAxisLabelNode = d3.select('.' + leftAxisClassName).node()\n  if (leftAxisLabelNode) {\n    const bbox = (leftAxisLabelNode as any).getBBox();\n    svg.append('line')\n      .attr('x1',bbox.x - arrowPadding)\n      .attr('x2',bbox.x + bbox.width + arrowPadding)\n      .attr('y1',bbox.y + arrowPadding)\n      .attr('y2',bbox.y + arrowPadding)\n      .attr('transform', 'rotate(-90)')\n      .attr('stroke-width', '10px')\n      .attr('stroke', 'none')\n      .style('pointer-events', 'none')\n      .attr(\"marker-end\", \"url(#arrowhead)\")\n      .attr(\"marker-start\", \"url(#arrowhead)\")\n  }\n\n  createBeeswarm({\n    container: beeswarm,\n    data: [...filteredBeeswarmData],\n    size: {width: beeswarmWidth - margin.right, height},\n    xScale, yScale,\n    label: quadrantLabels ? quadrantLabels.V : undefined,\n    labelFont, maxY,\n    zeroAxisLabel,\n    margin, axisLabelColor,\n    quadrantLabelColor,\n    quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  });\n\n  createScatterPlot({\n    container: scatterplot,\n    data: [...scatterplotData],\n    size: {width: scatterplotWidth, height},\n    margin,\n    averageLineText, quadrantLabels, labelFont,\n    xScale, yScale,\n    axisMinMax: {minX, maxX, minY, maxY}, axisLabelColor,\n    quadrantLabelColor,\n    quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  });\n\n\n};\n","import * as d3 from 'd3';\nimport {Datum, Dimensions} from './types';\nimport {appendQuadrantLabel} from './Utils';\n\nexport const maxBeeswarmWidth = 180;\nexport const minBeeswarmWidth = 110;\n\ninterface Input {\n  container: d3.Selection<any, unknown, null, undefined>;\n  data: Datum[];\n  size: Dimensions;\n  xScale: d3.ScaleLogarithmic<number, number, never>;\n  yScale: d3.ScaleLinear<number, number, never>;\n  label: string | undefined;\n  zeroAxisLabel: string | undefined;\n  labelFont: string | undefined;\n  maxY: number;\n  margin: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number,\n  }\n  axisLabelColor: string | undefined;\n  quadrantLabelColor: string | undefined;\n  quadrantBackgroundColors?: {V?: string};\n  onQuadrantLabelMouseMove: undefined | ((quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void);\n  onQuadrantLabelMouseLeave: undefined | ((quadrant: {id: string, label: string}) => void);\n}\n\ninterface ForceDatum extends Datum {\n  orginalX: number;\n  orginalY: number;\n}\n\nconst createBeeswarm = (input: Input) => {\n  const {\n    container, size: {width, height}, yScale, label, labelFont, maxY, zeroAxisLabel,\n    margin, axisLabelColor, quadrantLabelColor, quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  } = input;\n\n  const data: ForceDatum[] = input.data.map(d => ({...d, orginalX: d.x, orginalY: d.y}));\n\n  if (quadrantBackgroundColors) {\n    // Add background colors\n     container\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .attr(\"width\", width)\n        .attr(\"height\", yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.V ? quadrantBackgroundColors.V : '#fff')\n  }\n\n\n  const makeGridlinesY: any = () => d3.axisLeft(yScale).ticks(10);\n  // add the Y gridlines\n  container.append('g')\n      .attr('class', 'grid')\n      .style('opacity', '0.25')\n      .style('stroke-dasharray', '3 1')\n      .call(makeGridlinesY()\n          .tickSize(-width)\n          .tickFormat(''),\n      );\n  container.append('line')\n    .attr('x1', width)\n    .attr('x2', width)\n    .attr('y1', 0)\n    .attr('y2', height)\n    .attr('stroke', '#333')\n    .style('pointer-events', 'none')\n    .style('opacity', '0.25')\n    .style('stroke-dasharray', '3 1')\n  if (zeroAxisLabel !== undefined) {\n    container.append('text')\n      .attr('x', 0)\n      .attr('y', height + (margin.top * 1.5))\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('opacity', 0.8)\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', 'clamp(12px, 1vw, 16px)')\n      .style('font-weight', '600')\n      .style('pointer-events', 'none')\n      .text(zeroAxisLabel);\n  }\n\n  const multiplier = 1 - ((maxBeeswarmWidth - (width + 30)) / (maxBeeswarmWidth - minBeeswarmWidth));\n  const force = 7 * (1 + multiplier);\n\n  const simulation = d3.forceSimulation(data)\n      .force('x', d3.forceX(width / 2).strength(1))\n      .force(\"y\", d3.forceY(d => yScale(d.y ? d.y + 0 : 0 )))\n      .force(\"collide\", d3.forceCollide(force))\n      .stop();\n\n  for (let i = 0; i < 120; ++i) simulation.tick();\n\n  container\n    .selectAll('dot')\n    .data(data)\n    .enter()\n    .append('circle')\n      .attr('r', ({radius}) => radius ? radius : 4)\n      .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => yScale(d.orginalY))\n      .style('opacity', ({faded}) => faded ? 0.25 : 1)\n      .on('mouseover', onMouseEnter)\n      .on('mousemove', d => {\n          if (d.onMouseMove) {\n            d.onMouseMove(\n              {...d, x: d.orginalX},\n              {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY}\n            )\n          }\n        })\n      .on('mouseout', d => {\n        onMouseLeave();\n        if (d.onMouseLeave) {\n          d.onMouseLeave({...d, x: d.orginalX})\n        }\n      })\n      .on('click', d => d.onClick ? d.onClick(d) : undefined);\n\n  const hoveredBackground = container\n    .append('circle')\n      .style('pointer-events', 'none')\n      .style('fill', 'none');\n\n  const hoveredForeground = container\n    .append('circle')\n      .style('pointer-events', 'none')\n      .style('fill', 'none');\n\n  function onMouseEnter(d: ForceDatum) {\n    hoveredBackground\n      .attr('cx', d.x)\n      .attr(\"cy\", yScale(d.orginalY))\n      .attr('r', d.radius ? d.radius * 4 : 16)\n      .style('fill', d.fill ? d.fill : '#69b3a2')\n      .style('opacity', '0.2')\n\n    hoveredForeground\n      .attr('cx', d.x)\n      .attr(\"cy\", yScale(d.orginalY))\n      .attr('r', d.radius ? d.radius : 4)\n      .style('fill', d.fill ? d.fill : '#69b3a2')\n  }\n\n  const onMouseLeave = () => {\n    hoveredBackground.style('fill', 'none');\n    hoveredForeground.style('fill', 'none');\n  }\n\n  const highlighted = data.find(d => d.highlighted);\n    if (highlighted) {\n      // Add highlighted dot background\n      container.append('g')\n        .selectAll('dot')\n        .data([highlighted])\n        .enter()\n        .append('circle')\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => yScale(d.orginalY))\n          .attr('r', ({radius}) => radius ? radius * 4 : 16)\n          .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n          .style('opacity', '0.4')\n          .style('pointer-events', 'none');\n      // Add highlighted dot over to top\n      container.append('g')\n        .selectAll('dot')\n        .data([highlighted])\n        .enter()\n        .append('circle')\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => yScale(d.orginalY))\n          .attr('r', ({radius}) => radius ? radius : 4)\n          .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n          .style('cursor', ({onClick}) => onClick ? 'pointer' : 'default')\n          .on('mousemove', d => {\n            if (d.onMouseMove) {\n              d.onMouseMove(d, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n            }\n          })\n          .on('mouseout', d => {\n            if (d.onMouseLeave) {\n              d.onMouseLeave(d)\n            }\n          })\n          .on('click', d => d.onClick ? d.onClick(d) : undefined);\n    }\n\n  if (label !== undefined) {\n    const getLabel = appendQuadrantLabel(\n      container,\n      labelFont,\n      quadrantLabelColor,\n      onQuadrantLabelMouseMove,\n      onQuadrantLabelMouseLeave,\n    );\n\n    const textParts = (label as string).split('\\n');\n    const xVal = width / 2;\n    const yVal = yScale(maxY) + 20;\n    getLabel(xVal, yVal, textParts, 'middle', 'V');\n  }\n\n}\n\nexport default createBeeswarm;\n","import * as d3 from 'd3';\nimport {Datum, Dimensions} from './types';\nimport {appendQuadrantLabel} from './Utils';\n\ninterface Input {\n  container: d3.Selection<any, unknown, null, undefined>;\n  // tooltip: d3.Selection<any, unknown, null, undefined>;\n  data: Datum[];\n  size: Dimensions;\n  xScale: d3.ScaleLogarithmic<number, number, never>;\n  yScale: d3.ScaleLinear<number, number, never>;\n  margin: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number,\n  }\n  axisMinMax: {\n    minX: number,\n    maxX: number,\n    minY: number,\n    maxY: number,\n  };\n  averageLineText?: string;\n  quadrantLabels?: {I?: string, II?: string, III?: string, IV?: string};\n  quadrantBackgroundColors?: {I?: string, II?: string, III?: string, IV?: string};\n  labelFont?: string;\n  axisLabelColor: string | undefined;\n  quadrantLabelColor: string | undefined;\n  onQuadrantLabelMouseMove: undefined | ((quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void);\n  onQuadrantLabelMouseLeave: undefined | ((quadrant: {id: string, label: string}) => void);\n}\n\nconst createScatterPlot = (input: Input) => {\n  const {\n    container, size: {width, height},\n    averageLineText, quadrantLabels, labelFont, margin, data, xScale, yScale,\n    axisMinMax: {minX, maxX, minY, maxY}, axisLabelColor, quadrantLabelColor,\n    quadrantBackgroundColors, onQuadrantLabelMouseLeave, onQuadrantLabelMouseMove,\n  } = input;\n\n  if (quadrantBackgroundColors) {\n    // Add background colors\n     container\n        .append(\"rect\")\n        .attr(\"x\", xScale(1))\n        .attr(\"y\", 0)\n        .attr(\"width\", xScale(maxX) - xScale(1))\n        .attr(\"height\", yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.I ? quadrantBackgroundColors.I : '#fff')\n     container\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .attr(\"width\", xScale(1))\n        .attr(\"height\", yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.II ? quadrantBackgroundColors.II : '#fff')\n     container\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", yScale(0))\n        .attr(\"width\", xScale(1))\n        .attr(\"height\", yScale(minY) - yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.III ? quadrantBackgroundColors.III : '#fff')\n     container\n        .append(\"rect\")\n        .attr(\"x\", xScale(1))\n        .attr(\"y\", yScale(0))\n        .attr(\"width\", xScale(maxX) - xScale(1))\n        .attr(\"height\", yScale(minY) - yScale(0))\n        .attr(\"fill\",  quadrantBackgroundColors.IV ? quadrantBackgroundColors.IV : '#fff')\n  }\n\n  // Add X axis\n  const xAxis = container.append('g')\n    .attr('transform', 'translate(0,' + height + ')')\n    .call(\n      d3.axisBottom(xScale)\n        .ticks(10)\n        .tickFormat(t => parseFloat((t as number).toFixed(3)) as any)\n    )\n    xAxis.select('path')\n      .attr('stroke', 'none')\n    xAxis.selectAll('.tick line')\n      .attr('stroke', 'none')\n    xAxis.selectAll('text')\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('opacity', '0.75')\n      .style('font-size', `clamp(7px, ${width * 0.0175}px, 12px)`)\n\n  // gridlines in x axis function\n  const makeGridlinesX: any = () => d3.axisBottom(xScale).ticks(10);\n\n\n  // gridlines in y axis function\n  const makeGridlinesY: any = () => d3.axisLeft(yScale).ticks(10);\n\n  // add the X gridlines\n  container.append('g')\n      .attr('class', 'grid')\n      .attr('transform', 'translate(0,' + height + ')')\n      .style('opacity', '0.25')\n      .style('stroke-dasharray', '3 1')\n      .call(makeGridlinesX()\n          .tickSize(-height)\n          .tickFormat(''),\n      );\n\n  // add the Y gridlines\n  container.append('g')\n      .attr('class', 'grid')\n      .style('opacity', '0.25')\n      .style('stroke-dasharray', '3 1')\n      .call(makeGridlinesY()\n          .tickSize(-width)\n          .tickFormat(''),\n      );\n\n  // add quadrant lines\n  container.append('line')\n    .attr('x1',xScale(minX))\n    .attr('x2',xScale(maxX))\n    .attr('y1',yScale(0))\n    .attr('y2',yScale(0))\n    .attr('stroke-width', '2px')\n    .style('pointer-events', 'none')\n    .attr('stroke', '#333');\n  container.append('line')\n    .attr('x1',xScale(1))\n    .attr('x2',xScale(1))\n    .attr('y1',yScale(minY))\n    .attr('y2',0 - margin.top)\n    .attr('stroke-width', '2px')\n    .style('pointer-events', 'none')\n    .attr('stroke', '#333');\n\n  if (averageLineText) {\n    container.append('text')\n      .attr('x',xScale(1) + 4)\n      .attr('y',-10)\n      .attr('fill', axisLabelColor ? axisLabelColor : '#333')\n      .style('opacity', 0.8)\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .style('font-size', 'clamp(12px, 1vw, 16px)')\n      .style('font-weight', '600')\n      .style('pointer-events', 'none')\n      .text(averageLineText);\n\n  }\n\n  if (quadrantLabels !== undefined) {\n    const getLabel = appendQuadrantLabel(\n      container,\n      labelFont,\n      quadrantLabelColor,\n      onQuadrantLabelMouseMove,\n      onQuadrantLabelMouseLeave,\n    );\n    if (quadrantLabels.I !== undefined) {\n      const xVal = width - 4;\n      const yVal = yScale(maxY) + 20;\n      const textParts = (quadrantLabels.I as string).split('\\n');\n      getLabel(xVal, yVal, textParts, 'end', 'I');\n    }\n    if (quadrantLabels.II !== undefined) {\n      const xVal = xScale(minX) + 4;\n      const yVal = yScale(maxY) + 20;\n      const textParts = (quadrantLabels.II as string).split('\\n');\n      getLabel(xVal, yVal, textParts, 'start', 'II');\n    }\n    if (quadrantLabels.III !== undefined) {\n      const textParts = (quadrantLabels.III as string).split('\\n');\n      const xVal = xScale(minX) + 4;\n      const yVal = yScale(minY) - ((textParts.length - 1) * 15) - 6;\n      getLabel(xVal, yVal, textParts, 'start', 'III');\n    }\n    if (quadrantLabels.IV !== undefined) {\n      const textParts = (quadrantLabels.IV as string).split('\\n');\n      const xVal = width - 4;\n      const yVal = yScale(minY) - ((textParts.length - 1) * 15) - 6;\n      getLabel(xVal, yVal, textParts, 'end', 'IV');\n    }\n  }\n\n  // Add dots\n  container.append('g')\n    .selectAll('dot')\n    .data(data)\n    .enter()\n    .append('circle')\n      .attr('cx', ({x}) => xScale(x))\n      .attr('cy', ({y}) => yScale(y))\n      .attr('r', ({radius}) => radius ? radius : 4)\n      .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n      .style('opacity', ({faded}) => faded ? 0.25 : 1)\n      .style('cursor', ({onClick}) => onClick ? 'pointer' : 'default')\n      .on('mouseover', onMouseEnter)\n      .on('mousemove', d => {\n          if (d.onMouseMove) {\n            d.onMouseMove(d, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n          }\n        })\n      .on('mouseout', d => {\n        onMouseLeave();\n        if (d.onMouseLeave) {\n          d.onMouseLeave(d)\n        }\n      })\n      .on('click', d => d.onClick ? d.onClick(d) : undefined);\n\n  const hoveredBackground = container\n    .append('circle')\n      .style('pointer-events', 'none')\n      .style('fill', 'none');\n\n  const hoveredForeground = container\n    .append('circle')\n      .style('pointer-events', 'none')\n      .style('fill', 'none');\n\n  function onMouseEnter(d: Datum) {\n    hoveredBackground\n      .attr('cx', xScale(d.x))\n      .attr('cy', yScale(d.y))\n      .attr('r', d.radius ? d.radius * 4 : 16)\n      .style('fill', d.fill ? d.fill : '#69b3a2')\n      .style('opacity', '0.2')\n\n    hoveredForeground\n      .attr('cx', xScale(d.x))\n      .attr('cy', yScale(d.y))\n      .attr('r', d.radius ? d.radius : 4)\n      .style('fill', d.fill ? d.fill : '#69b3a2')\n  }\n\n  const onMouseLeave = () => {\n    hoveredBackground.style('fill', 'none');\n    hoveredForeground.style('fill', 'none');\n  }\n\n  const highlighted = data.find(d => d.highlighted);\n  if (highlighted) {\n    // Add highlighted dot background\n    container.append('g')\n      .selectAll('dot')\n      .data([highlighted])\n      .enter()\n      .append('circle')\n        .attr('cx', ({x}) => xScale(x))\n        .attr('cy', ({y}) => yScale(y))\n        .attr('r', ({radius}) => radius ? radius * 4 : 16)\n        .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n        .style('opacity', '0.2')\n        .style('pointer-events', 'none');\n    // Add highlighted dot over to top\n    container.append('g')\n      .selectAll('dot')\n      .data([highlighted])\n      .enter()\n      .append('circle')\n        .attr('cx', ({x}) => xScale(x))\n        .attr('cy', ({y}) => yScale(y))\n        .attr('r', ({radius}) => radius ? radius : 4)\n        .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n        .style('cursor', ({onClick}) => onClick ? 'pointer' : 'default')\n        .on('mousemove', d => {\n          if (d.onMouseMove) {\n            d.onMouseMove(d, {x: (d3 as any).event.pageX, y: (d3 as any).event.pageY})\n          }\n        })\n        .on('mouseout', d => {\n          if (d.onMouseLeave) {\n            d.onMouseLeave(d)\n          }\n        })\n        .on('click', d => d.onClick ? d.onClick(d) : undefined);\n  }\n}\n\nexport default createScatterPlot;\n","import { select } from 'd3';\nimport React, {useState, useEffect, useRef} from 'react';\nimport styled from 'styled-components';\nimport createChart from './createChart';\nimport debounce from 'lodash/debounce';\nimport {Datum} from './types';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  margin: auto;\n`;\n\nconst SizingElm = styled.div`\n  height: 100%;\n  width: 100%;\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\ninterface Props {\n  id: string;\n  data: Datum[];\n  axisLabels?: {\n    left?: string,\n    leftUp?: string\n    leftDown?: string\n    bottomLeft?: string\n    bottomRight?: string\n  };\n  axisMinMax?: {\n    minX?: number,\n    maxX?: number,\n    minY?: number,\n    maxY?: number,\n  };\n  averageLineText?: string;\n  zeroAxisLabel?: string;\n  quadrantLabels?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  axisLabelColor?: string;\n  quadrantLabelColor?: string;\n  quadrantBackgroundColors?: {I?: string, II?: string, III?: string, IV?: string, V?: string};\n  onQuadrantLabelMouseMove?: (quadrant: {id: string, label: string}, coords: {x: number, y: number}) => void;\n  onQuadrantLabelMouseLeave?: (quadrant: {id: string, label: string}) => void;\n}\n\nexport const PSwotPlot = (props: Props) => {\n  const {\n    id, data, axisLabels, axisMinMax, averageLineText, quadrantLabels,\n    zeroAxisLabel, axisLabelColor, quadrantLabelColor, quadrantBackgroundColors,\n    onQuadrantLabelMouseMove, onQuadrantLabelMouseLeave,\n  } = props;\n\n  const sizingNodeRef = useRef<HTMLDivElement | null>(null);\n  const svgNodeRef = useRef<any>(null);\n\n  const [windowWidth, setWindowWidth] = useState<number>(window.innerWidth);\n\n  useEffect(() => {\n    const updateWindowWidth = debounce(() => {\n      setWindowWidth(window.innerWidth);\n    }, 500);\n    window.addEventListener('resize', updateWindowWidth);\n    return () => {\n      window.removeEventListener('resize', updateWindowWidth);\n    };\n  }, []);\n\n\n  useEffect(() => {\n    let svgNode: HTMLDivElement | null = null;\n    if (svgNodeRef && svgNodeRef.current && sizingNodeRef && sizingNodeRef.current) {\n      const sizingNode = sizingNodeRef.current;\n      svgNode = svgNodeRef.current;\n      const svg = select(svgNode);\n      createChart({\n        svg, data: [...data], size: {\n          width: sizingNode.clientWidth, height: sizingNode.clientHeight,\n        },\n        axisLabels,\n        axisMinMax,\n        averageLineText,\n        quadrantLabels,\n        zeroAxisLabel,\n        axisLabelColor,\n        quadrantLabelColor,\n        quadrantBackgroundColors,\n        onQuadrantLabelMouseMove,\n        onQuadrantLabelMouseLeave,\n      });\n    }\n    return () => {\n      if (svgNode) {\n        svgNode.innerHTML = '';\n      }\n    };\n  }, [svgNodeRef, sizingNodeRef, windowWidth, props]);\n\n  return (\n    <Root>\n      <SizingElm ref={sizingNodeRef}>\n        <svg ref={svgNodeRef} key={id + windowWidth + 'svg'} className={'react-fast-charts-root-svg'} />\n      </SizingElm>\n    </Root>\n  );\n};\n\nexport {Datum};\n\nexport default PSwotPlot;\n","import styled from 'styled-components/macro';\n\ninterface Input {\n  title: string;\n  color: string;\n  rows: string[][];\n  boldColumns?: number[];\n  additionalHTML?: string;\n}\n\nexport const RapidTooltipRoot = styled.div`\n  position: fixed;\n  z-index: 3000;\n  max-width: 16rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.7rem;\n  line-height: 1.4;\n  text-transform: none;\n  transition: opacity 0.15s ease;\n  color: #333;\n  background-color: #fff;\n  border: 1px solid #dfdfdf;\n  border-radius: 4px;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  pointer-events: none;\n  transform: translate(-50%, calc(-100% - 1.5rem));\n  display: none;\n  \n  .rapid-tooltip-title {\n    padding: 0.5rem;\n  }\n\n  .rapid-tooltip-subsection-grid {\n    display: grid;\n    grid-gap: 0.5rem;\n    padding: 0.5rem;\n  }\n\n  .rapid-tooltip-cell {\n    display: flex;\n  }\n\n  .rapid-tooltip-arrow-container {\n    width: 100%;\n    height: 0.5rem;\n    display: flex;\n    justify-content: center;\n    position: absolute;\n    transform: translate(0, 100%);\n  }\n\n  .rapid-tooltip-arrow {\n    width: 0.5rem;\n    height: 0.5rem;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    left: -0.25rem;\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      border-left: 9px solid transparent;\n      border-right: 9px solid transparent;\n      border-top: 9px solid #dfdfdf;\n    }\n\n    &:after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 1px;\n      border-left: 8px solid transparent;\n      border-right: 8px solid transparent;\n      border-top: 8px solid #fff;\n    }\n  }\n`;\n\nexport const getStandardTooltip = (input: Input) => {\n  const columnCount = input.rows.length && input.rows[0].length ? input.rows[0].length : 1;\n\n  let rows: string = '';\n  input.rows.forEach(r => {\n    let row = '';\n    r.forEach((c, i) => {\n      const alignment = i === 0\n        ? 'justify-content: flex-start; text-align: left;'\n        : 'justify-content: flex-end; text-align: right;';\n      const style = input.boldColumns && input.boldColumns.includes(i)\n        ? `style=\"font-weight: 600;${alignment}\"` : '';\n      row = row + `<div class=\"rapid-tooltip-cell\" ${style}>${c}</div>`;\n    });\n    rows = rows + row;\n  });\n\n  const additionalContent = input.additionalHTML ? `<div>${input.additionalHTML}</div>` : '';\n\n  return `\n    <div>\n      <div class=\"rapid-tooltip-title\" style=\"background-color: ${input.color};\">\n        ${input.title}\n      </div>\n      <div\n        class=\"rapid-tooltip-subsection-grid\"\n        style=\"display: grid; grid-template-columns: repeat(${columnCount}, auto);\"\n      >\n        ${rows}\n      </div>\n      ${additionalContent}\n    </div>\n    <div class=\"rapid-tooltip-arrow-container\">\n      <div class=\"rapid-tooltip-arrow\"></div>\n    </div>\n  `;\n};","import React, {useRef, useCallback} from 'react'\nimport PSwotPlot, {Datum} from 'react-pswot-plot'\nimport RawData from './data/hefei_employees.json';\nimport IndustryData from './data/naics_2017.json';\nimport styled from 'styled-components';\nimport {getStandardTooltip, RapidTooltipRoot} from './rapidTooltip';\nimport {rgba} from 'polished';\n\nconst Root = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\n  width: 800px;\n  height: 700px;  \n`;\n\nconst colorMap = [\n  { id: '0', color: '#A973BE' },\n  { id: '1', color: '#F1866C' },\n  { id: '2', color: '#FFC135' },\n  { id: '3', color: '#93CFD0' },\n  { id: '4', color: '#488098' },\n  { id: '5', color: '#77C898' },\n  { id: '6', color: '#6A6AAD' },\n  { id: '7', color: '#D35162' },\n  { id: '8', color: '#F28188' },\n]\n\nconst App = () => {\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n\n  const setHovered = (datum: {label: string, fill?: string, id?: string, x?: number, y?: number}, coords: {x: number, y: number}) => {\n    const node = tooltipRef.current;\n    const industry = IndustryData.find(n => n.code === datum.id);\n    if (node) {\n      const rows: string[][] = [];\n      if (industry && industry.code) {\n        rows.push(\n          ['Code', industry.code],\n        )\n      } else {\n        rows.push(\n          ['Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.']\n        )\n      }\n      if (datum.x !== undefined) {\n        rows.push(\n          ['RCA', parseFloat(datum.x.toFixed(3)).toString() ],\n        )\n      }\n      if (datum.y) {\n        rows.push(\n          ['Density', parseFloat(datum.y.toFixed(3)).toString() ],\n        )\n      }\n      node.innerHTML = getStandardTooltip({\n        title: datum.label,\n        color: datum.fill ? rgba(datum.fill, 0.5) : '#f69c7c',\n        rows,\n        boldColumns: [1],\n      });\n      node.style.top = coords.y + 'px';\n      node.style.left = coords.x + 'px';\n      node.style.display = 'block';\n    }\n  };\n\n  const removeHovered = useCallback(() => {\n    const node = tooltipRef.current;\n    if (node) {\n      node.style.display = 'none';\n    }\n  }, [tooltipRef]);\n\n  const data: Datum[] = RawData.map((d) => {\n    const industry = IndustryData.find(n => n.code === d.naics.toString());\n    const naics_id = industry ? industry.naics_id : '';\n    let topLevelParentId: string = naics_id.toString();\n    let current = IndustryData.find(datum => datum.naics_id === naics_id);\n    while(current && current.parent_id !== null) {\n      // eslint-disable-next-line\n      current = IndustryData.find(datum => datum.naics_id === (current as any).parent_id);\n      if (current && current.parent_id !== null) {\n        topLevelParentId = current.parent_id.toString();\n      } else if (current && current.naics_id !== null) {\n        topLevelParentId = current.naics_id.toString();\n      }\n    }\n    if (parseInt(topLevelParentId, 10) > 8) {\n      console.error(current);\n      throw new Error('Parent out of range')\n    }\n    const parentColor = colorMap.find(c => c.id === topLevelParentId);\n    return {\n      id: d.naics.toString(),\n      label: industry ? industry.name : d.naics.toString(),\n      x: d.rca_emp,\n      y: d.density_emp,\n      fill: parentColor ? parentColor.color : undefined,\n      // highlighted: !Math.round(Math.random()),\n      // faded: !Math.round(Math.random()),\n      onMouseMove: setHovered,\n      onMouseLeave: removeHovered,\n    }\n  })\n\n  return (\n    <Root>\n      <Container>\n        <PSwotPlot\n          id={'react-pswot-plot-demo'}\n          data={data}\n          averageLineText={'Relative Advantage = 1'}\n          quadrantLabels={{\n            I: 'Strength',\n            II: 'Opportunity',\n            III: 'Threat',\n            IV: 'Weakness',\n            V: 'Potential',\n          }}\n          quadrantBackgroundColors={{\n            I: '#dadbdd',\n            II: '#e6e7e8',\n            III: '#f2f3f3',\n            IV: '#fafafb',\n            V: '#edf6f4',\n          }}\n          zeroAxisLabel={'Relative Advantage = 0'}\n          axisLabels={{\n            left: 'Predicted Density Change',\n            leftUp: 'Growing',\n            leftDown: 'Decreasing',\n            bottomLeft: 'Low Relative Advantage',\n            bottomRight: 'High Relative Advantage',\n          }}\n          axisLabelColor={'#333'}\n          quadrantLabelColor={'#f69c7c'}\n          onQuadrantLabelMouseMove={setHovered}\n          onQuadrantLabelMouseLeave={removeHovered}\n        />\n        <RapidTooltipRoot ref={tooltipRef} />\n      </Container>\n    </Root>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}